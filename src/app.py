# abtnetworks.com
#
import json
import os
import time

import requests
from SoarAction import SoarAction
from SoarUtils import output_handler

LogFile = "cve.log"
APP_NAME = "cve"
ACTION_LIST = ["cve_list"]

class CveApp(SoarAction):

    def __init__(self, app_name, action_list, input_data, action_select):
        log_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), LogFile)
        super(CveApp, self).__init__(app_name, log_path, action_list, input_data, action_select)

    def sendrequest(self, requesturl, sendjson):
        headers = {
        }
        self.logger.info("Url为:" + str(requesturl))
        self.logger.info("调用接口参数为:" + str(sendjson))
        data = {}
        try:
            resp = requests.get(requesturl, headers=headers, params=sendjson, verify=False)
            self.logger.info("status_code:" + str(resp.status_code))
            if resp.status_code == 200:
                return json.loads(resp.text)
        except ValueError:
            if len(resp):
                self.get_error_response("API请求失败" + "；Response: {}".format(resp))
            else:
                self.get_error_response("云端无响应")
        except Exception as e:
            self.get_error_response("请求数据异常:{}".format(e))
        return data

    def getsendparams(self):
        keyword = self.params["keyword"]
        page = int(self.params["page"])
        senddata = {
            'q': keyword,
            'page': page,
            'sort': ''
        }
        return senddata

    @output_handler
    def cve_list(self):
        requesturl = 'https://www.tenable.com/cve/api/v1/search'
        senddata = self.getsendparams()
        try:
            resp = self.sendrequest(requesturl, senddata)
            self.logger.info("调用成功")
            return self.get_response_json(resp.get("data"))
        except Exception as e:
            print('error', e)
            return self.get_error_response('cve_list fail')

if __name__ == '__main__':
    input_data = None
    action_name = None
    #input_data = ""
    #action_name = "cve_list"
    app = CveApp(APP_NAME, ACTION_LIST, input_data, action_name)
    app.do_action()
